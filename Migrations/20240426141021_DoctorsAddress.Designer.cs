// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SimplyRugby.Data;

#nullable disable

namespace SimplyRugby.Migrations
{
    [DbContext(typeof(SimplyRugbyContext))]
    [Migration("20240426141021_DoctorsAddress")]
    partial class DoctorsAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PlayerPosition", b =>
                {
                    b.Property<int>("PlayersMemberID")
                        .HasColumnType("int");

                    b.Property<int>("PositionsPositionID")
                        .HasColumnType("int");

                    b.HasKey("PlayersMemberID", "PositionsPositionID");

                    b.HasIndex("PositionsPositionID");

                    b.ToTable("PlayerPosition");
                });

            modelBuilder.Entity("PlayerTrainingSession", b =>
                {
                    b.Property<int>("PlayersMemberID")
                        .HasColumnType("int");

                    b.Property<int>("TrainingSessionsTrainingSessionID")
                        .HasColumnType("int");

                    b.HasKey("PlayersMemberID", "TrainingSessionsTrainingSessionID");

                    b.HasIndex("TrainingSessionsTrainingSessionID");

                    b.ToTable("PlayerTrainingSession");
                });

            modelBuilder.Entity("SimplyRugby.Models.Account.Account", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("AccountType").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Member", b =>
                {
                    b.Property<int>("MemberID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SRUNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SkillsID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamID")
                        .HasColumnType("int");

                    b.Property<string>("TelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MemberID");

                    b.HasIndex("SkillsID")
                        .IsUnique()
                        .HasFilter("[SkillsID] IS NOT NULL");

                    b.ToTable("Members");

                    b.HasDiscriminator<string>("MemberType").HasValue("Member");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.NextOfKin", b =>
                {
                    b.Property<int>("NextOfKinID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NextOfKinID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KinType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NextOfKinID");

                    b.ToTable("NextOfKins");

                    b.HasDiscriminator<string>("KinType").HasValue("NextOfKin");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Position", b =>
                {
                    b.Property<int>("PositionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PositionID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PositionID");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            PositionID = 1,
                            Name = "Full Back"
                        },
                        new
                        {
                            PositionID = 2,
                            Name = "Wing"
                        },
                        new
                        {
                            PositionID = 3,
                            Name = "Centre"
                        },
                        new
                        {
                            PositionID = 4,
                            Name = "Fly Half"
                        },
                        new
                        {
                            PositionID = 5,
                            Name = "Scrum Half"
                        },
                        new
                        {
                            PositionID = 6,
                            Name = "Hooker"
                        },
                        new
                        {
                            PositionID = 7,
                            Name = "Prop"
                        },
                        new
                        {
                            PositionID = 8,
                            Name = "2nd Row"
                        },
                        new
                        {
                            PositionID = 9,
                            Name = "Back Row"
                        });
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Skills.Skills", b =>
                {
                    b.Property<int>("SkillsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillsID"));

                    b.Property<int>("MemberID")
                        .HasColumnType("int");

                    b.HasKey("SkillsID");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("SimplyRugby.Models.Team.Match.Match", b =>
                {
                    b.Property<int>("MatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MatchID"));

                    b.Property<DateTime>("DatePlayed")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opponent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("MatchID");

                    b.HasIndex("TeamID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("SimplyRugby.Models.Team.Team", b =>
                {
                    b.Property<int>("TeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamID"));

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamID");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SimplyRugby.Models.Team.TrainingSession.TrainingSession", b =>
                {
                    b.Property<int>("TrainingSessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrainingSessionID"));

                    b.Property<int?>("CoachMemberID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("InjuriesAndAccidents")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillsAndActivities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamID")
                        .HasColumnType("int");

                    b.HasKey("TrainingSessionID");

                    b.HasIndex("CoachMemberID");

                    b.HasIndex("TeamID");

                    b.ToTable("TrainingSessions");
                });

            modelBuilder.Entity("SimplyRugby.Models.Account.AdminAccount", b =>
                {
                    b.HasBaseType("SimplyRugby.Models.Account.Account");

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("SimplyRugby.Models.Account.CoachAccount", b =>
                {
                    b.HasBaseType("SimplyRugby.Models.Account.Account");

                    b.Property<int?>("MemberID")
                        .HasColumnType("int");

                    b.Property<int?>("TeamID")
                        .HasColumnType("int");

                    b.HasIndex("MemberID")
                        .IsUnique()
                        .HasFilter("[MemberID] IS NOT NULL");

                    b.HasIndex("TeamID");

                    b.HasDiscriminator().HasValue("Coach");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Coach", b =>
                {
                    b.HasBaseType("SimplyRugby.Models.Member.Member");

                    b.HasIndex("TeamID");

                    b.HasDiscriminator().HasValue("Coach");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Player", b =>
                {
                    b.HasBaseType("SimplyRugby.Models.Member.Member");

                    b.Property<int>("DoctorID")
                        .HasColumnType("int");

                    b.Property<string>("HealthConditions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NextOfKinID")
                        .HasColumnType("int");

                    b.HasIndex("DoctorID");

                    b.HasIndex("NextOfKinID");

                    b.HasIndex("TeamID");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Guardian", b =>
                {
                    b.HasBaseType("SimplyRugby.Models.Member.NextOfKin");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("JuniorPlayerMemberID")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("JuniorPlayerMemberID");

                    b.HasDiscriminator().HasValue("Guardian");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.JuniorPlayer", b =>
                {
                    b.HasBaseType("SimplyRugby.Models.Member.Player");

                    b.Property<bool>("HasConsentForm")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("JuniorPlayer");
                });

            modelBuilder.Entity("PlayerPosition", b =>
                {
                    b.HasOne("SimplyRugby.Models.Member.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersMemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimplyRugby.Models.Member.Position", null)
                        .WithMany()
                        .HasForeignKey("PositionsPositionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerTrainingSession", b =>
                {
                    b.HasOne("SimplyRugby.Models.Member.Player", null)
                        .WithMany()
                        .HasForeignKey("PlayersMemberID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimplyRugby.Models.Team.TrainingSession.TrainingSession", null)
                        .WithMany()
                        .HasForeignKey("TrainingSessionsTrainingSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Member", b =>
                {
                    b.HasOne("SimplyRugby.Models.Member.Skills.Skills", "Skills")
                        .WithOne("Member")
                        .HasForeignKey("SimplyRugby.Models.Member.Member", "SkillsID");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Skills.Skills", b =>
                {
                    b.OwnsOne("SimplyRugby.Models.Member.Skills.Kicking", "Kicking", b1 =>
                        {
                            b1.Property<int>("SkillsID")
                                .HasColumnType("int");

                            b1.Property<int>("Drop")
                                .HasColumnType("int");

                            b1.Property<string>("DropComments")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Goal")
                                .HasColumnType("int");

                            b1.Property<string>("GoalComments")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Grubber")
                                .HasColumnType("int");

                            b1.Property<string>("GrubberComments")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Punt")
                                .HasColumnType("int");

                            b1.Property<string>("PuntComments")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SkillsID");

                            b1.ToTable("Skills");

                            b1.WithOwner()
                                .HasForeignKey("SkillsID");
                        });

                    b.OwnsOne("SimplyRugby.Models.Member.Skills.Passing", "Passing", b1 =>
                        {
                            b1.Property<int>("SkillsID")
                                .HasColumnType("int");

                            b1.Property<int>("Pop")
                                .HasColumnType("int");

                            b1.Property<string>("PopComments")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Spin")
                                .HasColumnType("int");

                            b1.Property<string>("SpinComments")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Standard")
                                .HasColumnType("int");

                            b1.Property<string>("StandardComments")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SkillsID");

                            b1.ToTable("Skills");

                            b1.WithOwner()
                                .HasForeignKey("SkillsID");
                        });

                    b.OwnsOne("SimplyRugby.Models.Member.Skills.Tackling", "Tackling", b1 =>
                        {
                            b1.Property<int>("SkillsID")
                                .HasColumnType("int");

                            b1.Property<int>("Front")
                                .HasColumnType("int");

                            b1.Property<string>("FrontComments")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Rear")
                                .HasColumnType("int");

                            b1.Property<string>("RearComments")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Scramble")
                                .HasColumnType("int");

                            b1.Property<string>("ScrambleComments")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Side")
                                .HasColumnType("int");

                            b1.Property<string>("SideComments")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("SkillsID");

                            b1.ToTable("Skills");

                            b1.WithOwner()
                                .HasForeignKey("SkillsID");
                        });

                    b.Navigation("Kicking")
                        .IsRequired();

                    b.Navigation("Passing")
                        .IsRequired();

                    b.Navigation("Tackling")
                        .IsRequired();
                });

            modelBuilder.Entity("SimplyRugby.Models.Team.Match.Match", b =>
                {
                    b.HasOne("SimplyRugby.Models.Team.Team", "Team")
                        .WithMany("Matches")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SimplyRugby.Models.Team.Match.Half", "FirstHalf", b1 =>
                        {
                            b1.Property<int>("MatchID")
                                .HasColumnType("int");

                            b1.Property<string>("Comments")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("DatePlayed")
                                .HasColumnType("datetime2");

                            b1.Property<int>("OpponentScore")
                                .HasColumnType("int");

                            b1.Property<int>("TeamScore")
                                .HasColumnType("int");

                            b1.HasKey("MatchID");

                            b1.ToTable("Matches");

                            b1.WithOwner()
                                .HasForeignKey("MatchID");
                        });

                    b.OwnsOne("SimplyRugby.Models.Team.Match.Half", "SecondHalf", b1 =>
                        {
                            b1.Property<int>("MatchID")
                                .HasColumnType("int");

                            b1.Property<string>("Comments")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTime>("DatePlayed")
                                .HasColumnType("datetime2");

                            b1.Property<int>("OpponentScore")
                                .HasColumnType("int");

                            b1.Property<int>("TeamScore")
                                .HasColumnType("int");

                            b1.HasKey("MatchID");

                            b1.ToTable("Matches");

                            b1.WithOwner()
                                .HasForeignKey("MatchID");
                        });

                    b.Navigation("FirstHalf")
                        .IsRequired();

                    b.Navigation("SecondHalf")
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SimplyRugby.Models.Team.TrainingSession.TrainingSession", b =>
                {
                    b.HasOne("SimplyRugby.Models.Member.Coach", "Coach")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("CoachMemberID");

                    b.HasOne("SimplyRugby.Models.Team.Team", "Team")
                        .WithMany("TrainingSessions")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coach");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SimplyRugby.Models.Account.CoachAccount", b =>
                {
                    b.HasOne("SimplyRugby.Models.Member.Coach", "Coach")
                        .WithOne("Account")
                        .HasForeignKey("SimplyRugby.Models.Account.CoachAccount", "MemberID");

                    b.HasOne("SimplyRugby.Models.Team.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID");

                    b.Navigation("Coach");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Coach", b =>
                {
                    b.HasOne("SimplyRugby.Models.Team.Team", "Team")
                        .WithMany("Coaches")
                        .HasForeignKey("TeamID");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Player", b =>
                {
                    b.HasOne("SimplyRugby.Models.Member.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SimplyRugby.Models.Member.NextOfKin", "NextOfKin")
                        .WithMany()
                        .HasForeignKey("NextOfKinID");

                    b.HasOne("SimplyRugby.Models.Team.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamID");

                    b.Navigation("Doctor");

                    b.Navigation("NextOfKin");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Guardian", b =>
                {
                    b.HasOne("SimplyRugby.Models.Member.JuniorPlayer", null)
                        .WithMany("Guardians")
                        .HasForeignKey("JuniorPlayerMemberID");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Skills.Skills", b =>
                {
                    b.Navigation("Member")
                        .IsRequired();
                });

            modelBuilder.Entity("SimplyRugby.Models.Team.Team", b =>
                {
                    b.Navigation("Coaches");

                    b.Navigation("Matches");

                    b.Navigation("Players");

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.Coach", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("SimplyRugby.Models.Member.JuniorPlayer", b =>
                {
                    b.Navigation("Guardians");
                });
#pragma warning restore 612, 618
        }
    }
}
